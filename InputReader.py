import os, sys
import pandas as pd
import distutils.util as du

def get_cell_list(lst):
    cells = [x.rstrip() for x in lst if '(' in x]
    cell_list = []
    for cell in cells:
        cell_coords = [int(x) for x in cell if x.isdigit()]
        cell_list.append(cell_coords)
    return cell_list


'''Read in all model details from Model_Setup.txt'''
def read_model_setup_txt(inTxt):
    cur_dir_file = os.path.dirname(__file__)
    up_dir_file = os.path.dirname(cur_dir_file)
    input_folder = os.path.join(up_dir_file, "raw_inputs")
    the_file = os.path.join(input_folder, inTxt)
    if os.path.exists(the_file):
        with open(the_file, "r") as s:
            s.readline() # skip GLDAS file path
            csv_in_folder = s.readline().split("\t")[-1].rstrip()
            outfile_flag = s.readline().split("\t")[-1].rstrip()
            lat_range = s.readline().split("\t")
            lower_lat, upper_lat = float(lat_range[1]), float(lat_range[2].rstrip())
            num_rows = int(4 * (upper_lat - lower_lat))
            lon_range = s.readline().split("\t")
            lower_lon, upper_lon = float(lon_range[1]), float(lon_range[2].rstrip())
            num_cols = int(4 * (upper_lon - lower_lon))
            training_date_range = s.readline().split("\t")
            train_first_date, train_last_date = training_date_range[1], training_date_range[2].rstrip()
            validation_date_range = s.readline().split("\t")
            validation_first_date, validation_last_date = validation_date_range[1], validation_date_range[2].rstrip()
            optim_global = s.readline().split("\t")[-1].rstrip()
            basin_size = int(s.readline().split("\t")[-1].rstrip())
            optim_local = s.readline().split("\t")[-1].rstrip()
            irrig_out_folder = s.readline().split("\t")[-1].rstrip()
            s.readline()
            s.readline()
            vis_out_folder = s.readline().split("\t")[-1].rstrip()
            trng_temporal_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            vldtn_temporal_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            t_v_temporal_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            trng_geo_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            vldtn_geo_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            t_v_geo_error_vis = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            mean_irrig = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            mean_irrig_vs_precip = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            mean_precip = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            mean_obs_vs_mod_precip = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            obs_vs_mod_cell = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            if obs_vs_mod_cell:
                lst = s.readline().split("\t")
                om_cell_lists = get_cell_list(lst)
            else:
                s.readline()
                om_cell_lists = 'n/a'
            irr_vs_precip_cell = bool(du.strtobool(s.readline().split("\t")[-1].rstrip()))
            if irr_vs_precip_cell:
                lst = s.readline().split("\t")
                ip_cell_lists = get_cell_list(lst)
            else:
                s.readline()
                ip_cell_lists = 'n/a'

            vis_array = [trng_temporal_error_vis, vldtn_temporal_error_vis, t_v_temporal_error_vis,
            trng_geo_error_vis, vldtn_geo_error_vis, t_v_geo_error_vis, mean_irrig, mean_irrig_vs_precip,
            mean_precip, mean_obs_vs_mod_precip, obs_vs_mod_cell, om_cell_lists, irr_vs_precip_cell, ip_cell_lists]
            retList = [csv_in_folder, outfile_flag, num_cols, num_rows, train_first_date, train_last_date,
                       validation_first_date, validation_last_date, optim_global, basin_size, optim_local,
                       irrig_out_folder, vis_out_folder, vis_array]

        return retList
    else:
        print("Cannot find Model_Setup.txt file, please check file name and location")
        sys.exit()

error_msg = "Error in {0} input file: data source not recognized"
my_date_parser = lambda x: pd.datetime.strptime(x, "%Y-%m-%d")

# '''Get precipitation data from .csv file generated by GLDAS reader'''
# def get_avg_temp(temp_file, input_dir):
#     temp_file = temp_file + '.csv'
#     in_file = os.path.join(input_dir, temp_file)
#     temp_df = pd.read_csv(in_file, index_col=0, parse_dates=True, date_parser=my_date_parser)
#     temp_df.index = temp_df.index.date
#     return temp_df
#
# '''Get precipitation data from .csv file generated by GLDAS reader'''
# def get_precip(precip_file, input_dir):
#     precip_file = precip_file + '.csv'
#     in_file = os.path.join(input_dir, precip_file)
#     precip_df = pd.read_csv(in_file, index_col=0, parse_dates=True, date_parser=my_date_parser)
#     precip_df.index = precip_df.index.date
#     return precip_df
#
# '''Get soil moisture data from .csv file generated by GLDAS reader'''
# def get_top_soil_moisture(sm_file, input_dir):
#     sm_file = sm_file + '.csv'
#     in_file = os.path.join(input_dir, sm_file)
#     sm_df = pd.read_csv(in_file, index_col=0, parse_dates=True, date_parser=my_date_parser)
#     sm_df.index = sm_df.index.date
#     # convert kg/m^2 to volumetric soil moisture (m^3/m^3) by dividing by layer thickness (100 mm)
#     resamp_df = sm_df/100
#     return resamp_df

def get_gldas_df(data_file, input_dir):
    data_file = data_file + '.csv'
    in_file = os.path.join(input_dir, data_file)
    data_df = pd.read_csv(in_file, index_col=0, parse_dates=True, date_parser=my_date_parser)
    data_df.index = data_df.index.date
    return data_df