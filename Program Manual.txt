MODEL INPUT TIPS
- Ensure that all variable names and values are tab separated
- Do not move or rename model_input.txt file

READING IN GLDAS DATA

This program extracts precipitation, air temperature, actual evapotranspiration, top soil moisture (0-10cm) and total soil moisture from .netcdf to .csv files.

1) Verify in Model_Setup.txt (can be found in raw_inputs folder) that all GLDAS files are stored in the GLDAS File Path. For the irrigation estimation model, all GLDAS files should be in the same folder, in .netcdf format, and at 3 hour, 0.25 degree resolution.

2) Verify that the latitude and longitude ranges are correct and are formatted appropriately using decimals, not degrees and minutes (e.g., 36.0 \t 38.0) and correspond with the subset of GLDAS data downloaded. If using the irrigation module in conjunction with groundwater module and GRACE data, ensure that the values are rounded up to the next whole degree (because GRACE data is only available in whole degree increments).

3) Update the GLDAS file flag to a unique identifier for this run (useful if performing more than one run on different data sets).

3) Run GLDASreader.py. Check that files are created in the designated output folder.

*If any GLDAS files are corrupt, try re-downloading the file. If that does not fix the problem, take note of the date and time of the file and mention it where necessary to describe data, and then delete the corrupt file. The model will continue to sum and average the available values.

** Units of output from GLDASreader: 
Precipitation (kg/m^2*3hr), equivalent to mm/3hr


USING IRRIGATION ESTIMATION ALGORITHM

This program uses a version of the soil moisture balance equation (SMBE) to estimate properties of the aquifer. It reads in the outputs generated by GLDASreader.py to a) calculate precipitation based on the SMBE and b) compare the calculated precipitation values with known precipitation values. It optimizes the parameter values, and then calculates estimated irrigation based on the GLDAS data and the optimized parameters.

The Algorithm.py file provides several algorithms for optimization. The global optimization algorithms "Genetic Algorithm" and "Basin-Hopping Algorithm" are currently supported, as are the local optimization algorithms "Nelder-Mead" and "Powell".

The algorithm outputs all explored parameter values and all root mean square error values for each iteration of the optimization algorithm in files in .csv format. Once an optimal solution is found, the algorithm also generates separate .csv files of the observed precipitation and the modeled precipitation. Finally, the algorithm generates a .txt file of the optimization algorithm outputs and optimal solution



1) Identify preferred global optimizer ("Genetic Algorithm" and "Basin-Hopping Algorithm" currently supported) and optional local optimizer ("Nelder-Mead" and "Powell" currently supported) to run on the parameters. Ensure that the names are spelled as shown here. If using Genetic Algorithm as the global optimizer, enter "N/A" for basin size. Similarly, if only using a global optimizer, enter "N/A" for local optimizer option.

2)Update Irrigation Output File Path if desired. 

3) Mark True any desired visualization outputs.There are two options for generating visualizations of model outputs and model error: specify the desired outputs within the Model_Setup.txt file (recommended for novice python users), or use ErrorPlotGenerator.py and OutputPlotGenerator.py to generate specific outputs and/or change graph sizes, colors, fonts, etc. This manual describes only the process for specifying outputs within Model_Setup.txt. If none of these are desired, set all values under IRRIGATION/PRECIPITATION VISUALIZATION OPTIONS to False when running Algorithm.py and then manually input optimized parameters into ErrorPlotGenerator.py and/or OutputPlotGenerator.py.

4) Run Algorithm.py.

